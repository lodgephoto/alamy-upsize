// Alamy Resize javascript//// (c) Copyright Mathew Lodge 2012//// Resizes an undersize image to meet Alamy requirements for upload//// R1.0, 15 September 2012///*    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>    *///save original ruler units, then assign it to inchesvar startRulerUnits = app.preferences.rulerUnitsvar startDialogs = app.displayDialogs;try{app.displayDialogs = DialogModes.NO; // Turn off dialogsapp.preferences.rulerUnits = Units.PIXELS; // Pixels for image sizesvar docref = app.activeDocumentvar h = docref.heightvar w = docref.widthvar a = h/w; // Aspect ratio for heightvar m = 3 // 3 bytes (one per RGB channel for an 8-bit image)var targetSize = 24 * 1024 * 1024 // Target size, in bytes (Alamy min is 24MB)var fudge = 1.1 // Fudge factor -- upper threshold for acceptable image sizevar toobig, toosmall, min, max;if ((h * w * m) < targetSize)  {    // Image needs to be scaled up    // Do a binary search to find the new size    min = w; wNew = w;    max = 0;    hNew = h;    do {        toosmall = ((wNew * hNew * m) < targetSize);        toobig = ((wNew * hNew * m) > targetSize*fudge);        if (toosmall) {            min = wNew;            if (max == 0)                wNew = 2 * wNew;            else                wNew = min + ((max-min)/2);        } // endif toosmall        if (toobig) {            max = wNew;            wNew = min + ((wNew-min)/2);        }        hNew = wNew * a;    } while (toosmall || toobig);    docref.resizeImage (wNew, hNew, 300 , ResampleMethod.BICUBICSMOOTHER);} //endif} // endtry// Restore ruler unitsfinally {    app.preferences.rulerUnits = startRulerUnits;    app.displayDialogs = startDialogs;}